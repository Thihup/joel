package jakarta.el;

import java.beans.FeatureDescriptor;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Field;
import java.util.Iterator;
import java.util.Objects;

/**
 * An {@link ELResolver} for resolving static fields, enum constants and static methods. Also handles constructor calls
 * as a special case.
 *
 * <p>
 * The resolver handles base objects of the type {@link ELClass}, which is usually generated by a Jakarta Expression
 * Language implementation.
 *
 * @see ELClass
 * @since Jakarta Expression Language 3.0
 */
public class StaticFieldELResolver extends ELResolver {

    public StaticFieldELResolver() {
    }

    /**
     * Returns the type of the property. Always returns <code>String.class</code>, since a field name is a String.
     *
     * @param context The context of this evaluation.
     * @param base    An <code>ELClass</code>.
     * @return <code>String.class</code>.
     */
    @Override
    public Class<?> getCommonPropertyType(ELContext context, Object base) {
        return String.class;
    }

    /**
     * Returns the properties that can be resolved. Always returns <code>null</code>, since there is no reason to iterate
     * through a list of one element: field name.
     *
     * @param context The context of this evaluation.
     * @param base    An <code>ELClass</code>.
     * @return <code>null</code>.
     */
    @Override
    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
        return null;
    }

    /**
     * Returns the type of a static field.
     *
     * <p>
     * If the base object is an instance of <code>ELClass</code>and the property is a String, the
     * <code>propertyResolved</code> property of the <code>ELContext</code> object must be set to <code>true</code> by the
     * resolver, before returning. If this property is not <code>true</code> after this method is called, the caller can
     * safely assume no value has been set.
     *
     * <p>
     * If the property string is a public static field of class specified in ELClass, return the type of the static field.
     *
     * @param context  The context of this evaluation.
     * @param base     An <code>ELClass</code>.
     * @param property The name of the field.
     * @return If the <code>propertyResolved</code> property of <code>ELContext</code> was set to <code>true</code>, then
     * the type of the type of the field.
     * @throws NullPointerException      if context is <code>null</code>.
     * @throws PropertyNotFoundException if field is not a public static filed of the class, or if the field is
     *                                   inaccessible.
     */
    @Override
    public Class<?> getType(ELContext context, Object base, Object property) {
        Objects.requireNonNull(context);
        if (!(base instanceof ELClass) || !(property instanceof String))
            return null;
        try {
            Field declaredField = ((ELClass) base).getKlass().getDeclaredField((String) property);
            context.setPropertyResolved(base, property);
            return declaredField.getType();
        } catch (NoSuchFieldException e) {
            return null;
        }
    }

    /**
     * Invokes a public static method or the constructor for a class.
     *
     * <p>
     * If the base object is an instance of <code>ELClass</code> and the method is a String, the
     * <code>propertyResolved</code> property of the <code>ELContext</code> object must be set to <code>true</code> by the
     * resolver, before returning. If this property is not <code>true</code> after this method is called, the caller should
     * ignore the return value.
     *
     * <p>
     * Invoke the public static method specified by <code>method</code>.
     *
     * <p>
     * The process involved in the method selection is the same as that used in {@link BeanELResolver}.
     *
     * <p>
     * As a special case, if the name of the method is "&lt;init&gt;", the constructor for the class will be invoked.
     *
     * @param base           An <code>ELClass</code>
     * @param method         When coerced to a <code>String</code>, the simple name of the method.
     * @param parameterTypes An array of Class objects identifying the method's formal parameter types, in declared order. Use
     *                       an empty array if the method has no parameters. Can be <code>null</code>, in which case the method's formal parameter
     *                       types are assumed to be unknown.
     * @param params         The parameters to pass to the method, or <code>null</code> if no parameters.
     * @return The result of the method invocation (<code>null</code> if the method has a <code>void</code> return type).
     * @throws MethodNotFoundException if no suitable method can be found.
     * @throws ELException             if an exception was thrown while performing (base, method) resolution. The thrown exception must
     *                                 be included as the cause property of this exception, if available. If the exception thrown is an
     *                                 <code>InvocationTargetException</code>, extract its <code>cause</code> and pass it to the <code>ELException</code>
     *                                 constructor.
     */
    @Override
    public Object invoke(ELContext context, Object base, Object method, Class<?>[] parameterTypes, Object[] params) {
        Objects.requireNonNull(context);
        if (!(base instanceof ELClass))
            return null;
        if (!(method instanceof String))
            return null;
        Class<?> klass = ((ELClass) base).getKlass();
        String methodName = (String) method;
        if (methodName.equals("<init>")) {
            try {
                if (parameterTypes == null || parameterTypes.length == 0) {
                    MethodHandle constructor = MethodHandles.lookup().findConstructor(klass, MethodType.methodType(void.class));
                    context.setPropertyResolved(base, method);
                    return constructor.invoke();
                }
                MethodHandle constructor = MethodHandles.lookup().findConstructor(klass, MethodType.methodType(void.class, parameterTypes));
                context.setPropertyResolved(base, method);
                return constructor.invoke(params);
            } catch (NoSuchMethodException e) {
                throw new MethodNotFoundException(e);
            } catch (Throwable exception) {
                throw new ELException(exception);
            }
        }
        try {
            Object returnValue = MethodHandles.lookup().unreflect(klass.getMethod(methodName, parameterTypes)).invokeWithArguments(params);
            context.setPropertyResolved(base, method);
            return returnValue;
        } catch (NoSuchMethodException e) {
            throw new MethodNotFoundException(e);
        } catch (Throwable throwable) {
            throw new ELException(throwable);
        }
    }

    /**
     * <p>
     * Returns the value of a static field.
     * </p>
     * <p>
     * If the base object is an instance of <code>ELClass</code> and the property is String, the
     * <code>propertyResolved</code> property of the <code>ELContext</code> object must be set to <code>true</code> by this
     * resolver, before returning. If this property is not <code>true</code> after this method is called, the caller should
     * ignore the return value.
     * </p>
     * <p>
     * If the property is a public static field of class specified in <code>ELClass</code>, return the value of the static
     * field. An Enum constant is a public static field of an Enum object, and is a special case of this.
     *
     * @param context  The context of this evaluation.
     * @param base     An <code>ELClass</code>.
     * @param property A static field name.
     * @return If the <code>propertyResolved</code> property of <code>ELContext</code> was set to <code>true</code>, then
     * the static field value.
     * @throws NullPointerException      if context is <code>null</code>.
     * @throws PropertyNotFoundException if the specified class does not exist, or if the field is not a public static filed
     *                                   of the class, or if the field is inaccessible.
     */
    @Override
    public Object getValue(ELContext context, Object base, Object property) {
        Objects.requireNonNull(context);
        if (!(base instanceof ELClass) || !(property instanceof String))
            return null;
        try {
            Field declaredField = ((ELClass) base).getKlass().getDeclaredField((String) property);
            context.setPropertyResolved(base, property);
            return declaredField.get(null);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            return null;
        }
    }

    /**
     * <p>
     * Inquires whether the static field is writable.
     * </p>
     * <p>
     * If the base object is an instance of <code>ELClass</code>and the property is a String, the
     * <code>propertyResolved</code> property of the <code>ELContext</code> object must be set to <code>true</code> by the
     * resolver, before returning. If this property is not <code>true</code> after this method is called, the caller can
     * safely assume no value has been set.
     * </p>
     *
     * <p>
     * Always returns a <code>true</code> because writing to a static field is not allowed.
     * </p>
     *
     * @param context  The context of this evaluation.
     * @param base     An <code>ELClass</code>.
     * @param property The name of the bean.
     * @return <code>true</code>
     * @throws NullPointerException if context is <code>null</code>.
     */
    @Override
    public boolean isReadOnly(ELContext context, Object base, Object property) {
        Objects.requireNonNull(context);
        if (!(base instanceof ELClass))
            return false;
        if (!(property instanceof String))
            return false;
        context.setPropertyResolved(base, property);
        return true;
    }


    /**
     * <p>
     * Attempts to write to a static field.
     * </p>
     * <p>
     * If the base object is an instance of <code>ELClass</code>and the property is String, a
     * <code>PropertyNotWritableException</code> will always be thrown, because writing to a static field is not allowed.
     *
     * @param context  The context of this evaluation.
     * @param base     An <code>ELClass</code>
     * @param property The name of the field
     * @param value    The value to set the field of the class to.
     * @throws NullPointerException         if context is <code>null</code>
     * @throws PropertyNotWritableException if base object instance of <code>ELClass</code> and <code>property</code>
     *                                      instance of String
     */
    @Override
    public void setValue(ELContext context, Object base, Object property, Object value) {
        Objects.requireNonNull(context);
        if (!(base instanceof ELClass))
            return;
        if (!(property instanceof String))
            return;
        throw new PropertyNotWritableException();
    }
}
